
DROP TABLE student;
CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL, 
    major VARCHAR(50) UNIQUE

);
DESCRIBE student; --print table 
DROP TABLE student; --remove table
ALTER TABLE student ADD gpa DECIMAL(3,2); --add a new column to the table
ALTER TABLE student DROP COLUMN gpa; --remove column 



INSERT INTO student VALUES(1, 'Jack', 'Biology');

SELECT * FROM student; --prints the whole table
INSERT INTO student VALUES(2, 'Kate', 'Sociology');
INSERT INTO student VALUES(3, 'Claire' , 'Chemistry');
INSERT INTO student(student_id, name) VALUES(3, 'Claire'); --if we don't have the major we can just add the name and id using this method
INSERT INTO student VALUES(4, 'Jack', 'Biology');
INSERT INTO student VALUES(5, 'Mike', 'Computer Science');

CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(50) , 
    major VARCHAR(50) DEFAULT 'undecided'

);

SELECT * FROM student; --prints the whole table

INSERT INTO student(student_id, name) VALUES(1, 'Jack'); --no selected major so it defaults
INSERT INTO student VALUES(2, 'Kate', 'Sociology');
INSERT INTO student VALUES(3, NULL , 'Chemistry');
INSERT INTO student(student_id, name) VALUES(3, 'Claire'); --if we don't have the major we can just add the name and id using this method
INSERT INTO student VALUES(4, 'Jack', 'Biology');
INSERT INTO student VALUES(5, 'Mike', 'Computer Science');


--you can automatically incremenert the id
CREATE TABLE student (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) , 
    major VARCHAR(50) DEFAULT 'undecided'

);

INSERT INTO student(name, major) VALUES('Kate', 'Sociology');
INSERT INTO student(name, major) VALUES('Jack', 'Biology');

--replace all biology to bio in the student table table
UPDATE student
SET major = 'Bio'
WHERE major = 'Biology';

--set the bio for student_id = 1 to bio major
UPDATE student
SET major = 'Bio'
WHERE student_id = 1;

UPDATE student
SET major = 'Biochemistry'
WHERE major = 'Bio' OR major = 'Chemistry';

--set name and major when student_id = 1;
UPDATE student
SET name = 'Tom', major = 'undecided'
WHERE student_id = 1;

--delete the row with student_id = 5;
DELETE FROM student
WHERE student_id =5;


--select keyword
SELECT name, major
FROM student;

--set the major and name where the the studnet id is 1
UPDATE student
SET major = 'Biology', name = 'Jack'
WHERE student_id = 1;

--alphabetically ordered by name from table student
SELECT student.name, student.major
FROM student
ORDER BY name;

--alphabetically ordered by name DESCENEDING ORDER
SELECT student.name, student.major
FROM student
ORDER BY name DESC;


--ORDER BY MAJOR THEN STUDENT ID
SELECT *
FROM student
ORDER BY major, student_id DESC ;

--NEED TO CREATE BRANCH TABLE BEFORE MAKING SUPER_ID AND BRANCH_ID FOREGN KEYS
CREATE TABLE employee (

    emp_id INT PRIMARY KEY,
    first_name VARCHAR(40),
    last_name VARCHAR(40),
    birth_day DATE,
    sex VARCHAR(1),
    salary INT,
    super_id INT,
    branch_id INT
);

--manager id is a foreign key that is taken from employee table employee_id
CREATE TABLE branch (

    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mgr_id INT,
    mgr_start_date DATE,
    FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL 
);

--add bracnh_id as foreign key to the employee table
ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

--add supervisor_id as foreign key to the employee table
ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

--BRANCH ID IS A FOREIGN KEY FROM THE BRANCH TABLE
CREATE TABLE client (
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL

);

--WORKS WITH TABLE USING COMPOSITE KEY
CREATE TABLE works_with (

    emp_id INT,
    client_id INT,
    total_sales INT,
    PRIMARY KEY(emp_id, client_id),
    FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
    FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (

    branch_id INT,
    supplier_name VARCHAR(40),
    supply_type VARCHAR(40),
    PRIMARY KEY(branch_id, supplier_name),
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

--TIME TO ADD DATA TO THE TABLES
--FIRST LETS ADD DAVID WALLACE TO THE EMPLOYEE TABLE
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);
SELECT * FROM employee;
SELECT * FROM branch;


INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

--update david wallace to have branch_id 1 to b in corporate
UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1 );



--Now we add all the employees for the Scranton Branch
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 101, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;


INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);


--Stamford Branch
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

--BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uniball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uniball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

--CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana County', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

--Works With
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

SELECT * FROM employee;
SELECT * FROM branch;
SELECT * FROM client;
SELECT * FROM branch_supplier;
SELECT * FROM works_with;


--Find all employees ordered by salary
SELECT *
FROM employee
ORDER BY salary DESC;

--FIND ALL EMPLOYEES ORDERED BY SEX THEN NAME
SELECT *
FROM employee
ORDER BY sex DESC, first_name, last_name;

--FIND THE FIRST 5 EMPLOYEES JN THE TBALE
SELECT *
FROM employee
LIMIT 5;

--FIND THE FIRST AND LAST NAMES OF ALL EMPLOYEES
SELECT first_name, last_name
FROM employee;

--FIND THE FORENAME AND SURNAMES NAMES OF ALL EMPLOYEES
SELECT first_name AS forename, last_name AS surname
FROM employee;

--FIND OUT ALL THE DIFFERENT GENDERS
SELECT DISTINCT SEX
FROM employee;

--FIND THE NUMBER OF EMPLOYEES
SELECT COUNT(emp_id)
FROM employee;

--FIND THE NUMBER OF FEMALE EMPLOYEES BORN AFTER 1970
SELECT COUNT(emp_id)
FROM employee
WHERE sex = 'F' AND birth_day > '1970-01-01';

--FIND THE AVERAGFE OF ALL EMPLOYEES SALARIES
SELECT AVG(salary)
FROM employee
WHERE sex = 'M';

--FIND THE SUM OF ALL EMPLOTYEES SALARIES
SELECT SUM(salary)
FROM employee;

--FIND OUT HOW MANY MALES AND FEMALES THERE ARE
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;

--FIND THE TOTAL SALES OF EACH SALESMAN
SELECT SUM(total_sales), emp_id
FROM works_with
GROUP BY emp_id;

--FIND THE TOTAL SALES OF EACH client
SELECT SUM(total_sales), client_id
FROM works_with
GROUP BY client_id;


--WILDCARDS - USE THESE TO FIND KEYWORDS IN THE DATABASE
-- % ANY NUMBER OF CHARACTERS, _ FOR ONE CHARACTER INFORNT OR BEHIND THE KEYWORD YOU ARE LOOKING FOR 

-- FIND ANY CLIENTS WHO ARE AN LLC
SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '%Label%';




